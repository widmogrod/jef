
define([
    './functional/is',
    './functional/isFunction',
    './functional/isArray',
    './functional/isObject',
    './functional/isNumber',
    './functional/isDefined',
    './functional/isTraversable',
    './functional/slice',
    './functional/get',
    './functional/has',
    './functional/set',
    './functional/isIn',
    './functional/first',
    './functional/maybe',
    './functional/each',
    './functional/map',
    './functional/apply',
    './functional/not',
    './functional/returnValue',
    './functional/transpose',
    './functional/fill',
    './functional/curry',
    './functional/applyc',
    './functional/invoke',
    './functional/flip',
    './functional/traverse',
    './functional/compose',
    './functional/reduce',
    './functional/filter',
    './functional/memoize',
    './functional/mValue',
    './functional/merge',
    './functional/clone',
    './functional/some',
    './functional/contains',
    './functional/noop',
    './functional/immediate',
    './functional/until'
], function (
    is,
    isFunction,
    isArray,
    isObject,
    isNumber,
    isDefined,
    isTraversable,
    slice,
    get,
    has,
    set,
    isIn,
    first,
    maybe,
    each,
    map,
    apply,
    not,
    returnValue,
    transpose,
    fill,
    curry,
    applyc,
    invoke,
    flip,
    traverse,
    compose,
    reduce,
    filter,
    memoize,
    mValue,
    merge,
    clone,
    some,
    contains,
    noop,
    immediate,
    until
) {
    'use strict';

    return {
        apply: apply,
        applyc: applyc,
        curry: curry,
        clone: clone,
        compose: compose,
        contains: contains,
        fill: fill,
        filter: filter,
        flip: flip,
        each: each,
        'get': get,
        has: has,
        invoke: invoke,
        is: is,
        isIn: isIn,
        isArray: isArray,
        isFunction: isFunction,
        isObject: isObject,
        isTraversable: isTraversable,
        immediate: immediate,
        not: not,
        noop: noop,
        map: map,
        maybe: maybe,
        memoize: memoize,
        merge: merge,
        mValue: mValue,
        reduce: reduce,
        transpose: transpose,
        traverse: traverse,
        returnValue: returnValue,
        slice: slice,
        some: some,
        until: until
    }
});
